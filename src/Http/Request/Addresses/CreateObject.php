<?php

namespace ShippoClient\Http\Request\Addresses;

use ShippoClient\Attributes\InvalidAttributeException;
use ShippoClient\Attributes;

/**
 * Address objects are used for creating Shipments, obtaining Rates and printing Labels,
 * and thus are one of the fundamental building blocks of the Shippo API.
 */
class CreateObject
{
    const OBJECT_PURPOSE_QUOTE = 'QUOTE';
    const OBJECT_PURPOSE_PURCHASE = 'PURCHASE';

    public function __construct(array $attributes)
    {
        $this->attributes = new Attributes($attributes);
    }

    /**
     * Quote Addresses can be generated by only passing selected address information.
     * Quote Addresses can only be used for obtaining shipping Rate quotes
     * and cannot be used to purchase Labels.
     * Addresses that should be used for purchases must be fully entered,
     * i.e., a complete street address with all required fields must be passed.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getObjectPurpose()
    {
        $allowed = array(static::OBJECT_PURPOSE_QUOTE, static::OBJECT_PURPOSE_PURCHASE);

        return $this->attributes->mustHave('object_purpose')->asString(function ($value) use ($allowed) {
            return in_array($value, $allowed);
        });
    }

    /**
     * First and Last Name of the addressee
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getName()
    {
        return $this->attributes->mustHave('name')->asString();
    }

    /**
     * Company Name
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->attributes->mayHave('company')->asString();
    }

    /**
     * First street line, which is usually the street name.
     * Note that a building's street number should be passed separately (see below).
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getStreet1()
    {
        return $this->attributes->mustHave('street1')->asString();
    }

    /**
     * Street number of the addressed building.
     * This field can be included in street1 for all carriers except for DHL Paket (Germany).
     *
     * @return string
     */
    public function getStreetNo()
    {
        return $this->attributes->mayHave('street_no')->asString();
    }

    /**
     * Second street line.
     *
     * @return string
     */
    public function getStreet2()
    {
        return $this->attributes->mayHave('street2')->asString();
    }

    /**
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates.
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US).
     * Passing a state or a ZIP code (see below), if known, will yield more accurate results.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getCity()
    {
        return $this->attributes->mustHave('city')->asString();
    }

    /**
     * Postal code of an Address. When creating a Quote Addresses,
     * sending a ZIP is optional but will yield more accurate Rates.
     *
     * @return string
     */
    public function getZip()
    {
        return $this->attributes->mustHave('zip')->asString();
    }

    /**
     * State values are only required for shipments from
     * the United States and Canada(most carriers only accept two-character state abbreviations).
     * However, to receive more accurate quotes, passing it is generally recommended.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getState()
    {
        return $this->attributes->mustHave('state')->asString();
    }

    /**
     * Example: 'US' or 'DE'.
     * All accepted values can be found on the Official ISO Website(http://www.iso.org/).
     * Sending a country is always required.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getCountry()
    {
        return $this->attributes->mustHave('country')->asString();
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel.
     * This increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getPhone()
    {
        return $this->attributes->mustHave('phone')->asString();
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getEmail()
    {
        return $this->attributes->mustHave('email')->asString(function ($email) {
            return filter_var($email, FILTER_VALIDATE_EMAIL);
        });
    }

    /**
     * Indicates whether the address provided is a residential address or not
     *
     * @return null|bool
     */
    public function getIsResidential()
    {
        $is_residential = $this->attributes->mayHave('is_residential')->value();
        if ($is_residential === null) {
            return null;
        }

        return (bool)$is_residential;
    }

    /**
     * A string of up to 100 characters
     * that can be filled with any additional information you want to attach to the object.
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->attributes->mayHave('metadata')->asString(function ($metadata) {
//            return mb_strlen($metadata) <= 100;
              return strlen($metadata) <= 100;
        });
    }

    public function toArray()
    {
        return array_filter(array(
            'object_purpose' => $this->getObjectPurpose(),
            'name'           => $this->getName(),
            'company'        => $this->getCompany(),
            'street1'        => $this->getStreet1(),
            'street_no'      => $this->getStreetNo(),
            'street2'        => $this->getStreet2(),
            'city'           => $this->getCity(),
            'state'          => $this->getState(),
            'zip'            => $this->getZip(),
            'country'        => $this->getCountry(),
            'phone'          => $this->getPhone(),
            'email'          => $this->getEmail(),
            'is_residential' => $this->getIsResidential(),
            'metadata'       => $this->getMetadata(),
        ));
    }
}
