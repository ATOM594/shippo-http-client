<?php

namespace ShippoClient\Http\Request\Addresses;

use ShippoClient\Http\Request\CommonParameter;
use TurmericSpice\Container;
use TurmericSpice\Container\InvalidAttributeException;
use TurmericSpice\ReadWriteAttributes;

/**
 * Address objects are used for creating Shipment, obtaining Rates and printing Labels,
 * and thus are one of the fundamental building blocks of the Shippo API.
 */
class CreateObject extends CommonParameter
{
    use ReadWriteAttributes {
        toArray as public __toArray;
        __construct as public __t_construct;
    }

    const OBJECT_PURPOSE_QUOTE = 'QUOTE';
    const OBJECT_PURPOSE_PURCHASE = 'PURCHASE';

    /**
     * Quote Address can be generated by only passing selected address information.
     * Quote Address can only be used for obtaining shipping Rate quotes
     * and cannot be used to purchase Labels.
     * Address that should be used for purchases must be fully entered,
     * i.e., a complete street address with all required fields must be passed.
     *
     * Required
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getObjectPurpose()
    {
        $allowed = [static::OBJECT_PURPOSE_QUOTE, static::OBJECT_PURPOSE_PURCHASE];

        return $this->attributes->mustHave('object_purpose')->asString(function ($value) use ($allowed) {
            return in_array($value, $allowed, true);
        });
    }

    /**
     * First and Last Name of the addressee
     *
     * Required for purchase
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getName()
    {
        if ($this->getObjectPurpose() === static::OBJECT_PURPOSE_PURCHASE) {
            return $this->attributes->mustHave('name')->asString();
        }
        return $this->attributes->mayHave('name')->asString();
    }

    /**
     * Company Name
     *
     * Optional
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->attributes->mayHave('company')->asString();
    }

    /**
     * First street line, which is usually the street name.
     * Note that a building's street number should be passed separately (see below).
     *
     * Required for purchase
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getStreet1()
    {
        if ($this->getObjectPurpose() === static::OBJECT_PURPOSE_PURCHASE) {
            return $this->attributes->mustHave('street1')->asString();
        }
        return $this->attributes->mayHave('street1')->asString();
    }

    /**
     * Street number of the addressed building.
     * This field can be included in street1 for all carriers except for DHL Paket (Germany).
     *
     * Optional
     *
     * @return string
     */
    public function getStreetNo()
    {
        return $this->attributes->mayHave('street_no')->asString();
    }

    /**
     * Second street line.
     *
     * Optional
     *
     * @return string
     */
    public function getStreet2()
    {
        return $this->attributes->mayHave('street2')->asString();
    }

    /**
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates.
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US).
     * Passing a state or a ZIP code (see below), if known, will yield more accurate results.
     *
     * Required for purchase
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getCity()
    {
        if ($this->getObjectPurpose() === static::OBJECT_PURPOSE_PURCHASE) {
            return $this->attributes->mustHave('city')->asString();
        }
        return $this->attributes->mayHave('city')->asString();
    }

    /**
     * Postal code of an Address. When creating a Quote Address,
     * sending a ZIP is optional but will yield more accurate Rates.
     *
     * Required for purchase
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getZip()
    {
        if ($this->getObjectPurpose() === static::OBJECT_PURPOSE_PURCHASE) {
            return $this->attributes->mustHave('zip')->asString();
        }
        return $this->attributes->mayHave('zip')->asString();
    }

    /**
     * State values are only required for shipments from
     * the United States and Canada(most carriers only accept two-character state abbreviations).
     * However, to receive more accurate quotes, passing it is generally recommended.
     *
     * Required for purchase for some countries
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getState()
    {
        if (in_array($this->getCountry(), ['US', 'CA'], true)) {
            return $this->attributes->mustHave('state')->asString();
        }
        return $this->attributes->mayHave('state')->asString();
    }

    /**
     * Example: 'US' or 'DE'.
     * All accepted values can be found on the Official ISO Website(http://www.iso.org/).
     * Sending a country is always required.
     *
     * Required
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getCountry()
    {
        return $this->attributes->mustHave('country')->asString(function ($country) {
            return (bool)preg_match('/^[A-Z]{2}$/', $country);
        });
    }

    /**
     * Address containing a phone number allow carriers to call the recipient when delivering the Parcel.
     * This increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.
     *
     * Optional for domestic, required for international
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getPhone()
    {
        return $this->attributes->mayHave('phone')->asString();
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     *
     * Required for purchase
     *
     * @return string
     * @throws InvalidAttributeException
     */
    public function getEmail()
    {
        $validation = function ($email) {
            return filter_var($email, FILTER_VALIDATE_EMAIL);
        };
        if ($this->getObjectPurpose() === static::OBJECT_PURPOSE_PURCHASE) {
            return $this->attributes->mustHave('email')->asString($validation);
        }
        return $this->attributes->mayHave('email')->asString($validation);
    }

    /**
     * Indicates whether the address provided is a residential address or not
     *
     * Optional
     *
     * @return null|bool
     */
    public function getIsResidential()
    {
        $is_residential = $this->attributes->mayHave('is_residential')->value();
        if ($is_residential === null) {
            return null;
        }

        return (bool)$is_residential;
    }

    public function toArray()
    {
        return array_filter($this->__toArray());
    }
}
